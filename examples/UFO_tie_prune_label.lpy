"""
Tying, Pruning and labeling UFO architecture trees
"""
import sys
sys.path.append('../')
from stochastic_tree import BasicWood
from architecture import Architecture, WireVector
import numpy as np
import random as rd
import copy
import gc
import time
import helper

class Spur(BasicWood):
    count = 0
    def __init__(self, copy_from = None, max_buds_segment: int = 5, thickness: float = 0.1, \
                 thickness_increment: float = 0.01, growth_length: float = 1., max_length: float = 7., \
                 order: int = 1, prototype_dict: dict = {}, name = None, color = None):
        super().__init__(copy_from, max_buds_segment,thickness, thickness_increment, growth_length, \
                         max_length, order, color)
        if copy_from:
            self.__copy_constructor__(copy_from)
        else:
            self.prototype_dict = prototype_dict
        if not name:
            self.name = str(self.__class__.__name__) +'_'+ str(self.__class__.count)
        Spur.count+=1

    def is_bud_break(self, num_buds_segment):
        return (rd.random() < 0.1)

    def create_branch(self):
        return None

    def grow(self):
        pass

class Branch(BasicWood):
    count = 0
    def __init__(self, copy_from = None,  max_buds_segment: int = 5, thickness: float = 0.1, \
                 thickness_increment: float = 0.01, growth_length: float = 1., max_length: float = 7., \
                 order: int = 1, prototype_dict: dict = {}, name = None, color = None):

        super().__init__(copy_from, max_buds_segment,thickness, thickness_increment, growth_length, \
                         max_length, order, color)
        if copy_from:
            self.__copy_constructor__(copy_from)
        else:
            self.prototype_dict = prototype_dict

        if not name:
            self.name = str(self.__class__.__name__) +'_'+ str(self.__class__.count)
        Branch.count+=1

    def is_bud_break(self, num_buds_segment):
        return (rd.random() < 0.1*(1 - num_buds_segment/self.max_buds_segment))

    def create_branch(self):
        new_ob =  Spur(copy_from = self.prototype_dict['spur'])
        return new_ob

    def grow(self):
        pass

class Trunk(BasicWood):
    count = 0
    """ Details of the trunk while growing a tree, length, thickness, where to attach them etc """
    def __init__(self, copy_from = None, max_buds_segment: int = 5, thickness: float = 0.1, \
                 thickness_increment: float = 0.01, growth_length: float = 1., max_length: float = 7., \
                 order: int = 0, prototype_dict: dict = {}, name = None, color = None):

        super().__init__(copy_from, max_buds_segment,thickness, thickness_increment, growth_length, \
                         max_length, order, color)
        if copy_from:
            self.__copy_constructor__(copy_from)
        else:
            self.prototype_dict = prototype_dict
        if not name:
            self.name = str(self.__class__.__name__) +'_'+ str(self.__class__.count)
        Trunk.count+=1

    def is_bud_break(self, num_buds_segment):
        if (rd.random() > 0.1*(1 - num_buds_segment/self.max_buds_segment)):
            return False
        return True

    def create_branch(self):
        if self.length < 5:
            return None
        if rd.random() > 0.8:
            return Spur(copy_from = self.prototype_dict['spur'])
        else:
            return Branch(copy_from = self.prototype_dict['branch'])

    def grow(self):
        pass




#Pass transition probabs? --> solve with abstract classes

basicwood_prototypes = {}
basicwood_prototypes['trunk'] = Trunk(max_length = 20, thickness_increment = 0.01, prototype_dict = basicwood_prototypes, color = 0)
basicwood_prototypes['branch'] = Branch(max_length = 20, thickness_increment = 0.005, prototype_dict = basicwood_prototypes, color = 1)
basicwood_prototypes['spur'] = Spur(max_length = 1, thickness_increment = 0.005, prototype_dict = basicwood_prototypes, color = 2)

#init  
trunk_base = Trunk(copy_from = basicwood_prototypes['trunk'])
time_count = 0





# Define the architecture
x_pts = (np.arange(7) + 1) * 3
arch = Architecture()
arch['trunk'] = WireVector((0,0,3), (21, 0, 3), one_sided=False)
trunk_base.update_guide(arch['trunk'])
for x in x_pts:
    arch.add_item('leader', WireVector((x,0,0), (x,0,21)))

num_iteration_tie = 5

###Tying stuff begins
def tie(lstring):
    for j,i in enumerate(lstring):
        if (i == 'C' and i[0].type.__class__.__name__ == 'Branch') or i == 'T' :
            if i[0].type.tie_updated == False:
                continue
            curr = i[0]
            if i[0].type.guide_points:
                # print("tying ", i[0].type.name, i[0].type.guide_target.point)
                i[0].type.tie_updated = False
                i[0].type.guide_target.add_branch()
                lstring, count = i[0].type.tie_lstring(lstring, j)

                return True
    return False


def StartEach(lstring):
    global parent_child_dict, arch, trunk_base
    trunk_wire = arch.get('trunk', None)
    if trunk_wire is not None and not trunk_base.tie_updated:
        trunk_base.tie_update()

    print(trunk_base.start, trunk_base.end)

    for i in parent_child_dict[trunk_base.name]:
        if i.tie_updated == False:
            i.tie_update()


def EndEach(lstring):
    global parent_child_dict, arch

    tied = False
    if (getIterationNb()+1)%num_iteration_tie == 0:
        trunk_wire = arch.get('trunk', None)
        if trunk_wire is not None:
            trunk_base.update_guide(trunk_base.guide_target) #Tie trunk one iteration before branches

        branches = parent_child_dict[trunk_base.name]
        i_branch, i_wire = helper.determine_branch_wire_pairing(branches, arch['leader'], max_energy=300)
        if i_branch is not None:
            branches[i_branch].guide_target = arch['leader'][i_wire]

        for branch in parent_child_dict[trunk_base.name]:
            branch.update_guide(branch.guide_target)
            print(branch.name, branch.guide_target)
        while tie(lstring):
            pass
        while pruning_strategy(lstring):
            pass
    return lstring

def pruning_strategy(lstring): #Remove remnants of cut
    cut = False
    for j,i in enumerate(lstring):
        if i.name == 'C' and i[0].type.age > 8 and i[0].type.has_tied == False and i[0].type.cut == False:
            i[0].type.cut = True
            print("Cutting", i[0].type.name)
            lstring = helper.cut_from(j, lstring)
            return True
    return False

parent_child_dict = {}
parent_child_dict[trunk_base.name] = []
label = True
#print(generate_points_ufo())
#Tie trunk
module Attractors
module grow_object
module bud
module branch
module C
Axiom: Attractors(arch)GetPos(trunk_base.start)T(ParameterSet(type = trunk_base))&(270)/(0)grow_object(trunk_base)GetPos(trunk_base.end)
derivation length: 50

production:
#Decide whether branch internode vs trunk internode need to be the same size.
grow_object(o) :
    if o == None:
        produce *
    if o.length >= o.max_length:
        nproduce *
    else:
        o.grow_one()
        if label:
            nproduce SetColor(o.color)
        produce I(o.growth_length, o.thickness, o)bud(ParameterSet(type = o, num_buds = 0))grow_object(o)

bud(t) :
    if t.type.is_bud_break(t.num_buds):
        new_object = t.type.create_branch()
        if new_object == None:
            produce *
        parent_child_dict[new_object.name] = []
        parent_child_dict[t.type.name].append(new_object)
        #Store new object somewhere
        t.num_buds+=1
        t.type.num_branches+=1
        nproduce [@RGetPos(new_object.start)C(ParameterSet(type = new_object))/(rd.random()*360)&(rd.random()*90)grow_object(new_object)GetPos(new_object.end)]bud(t)


I(s,r,o) --> I(s,r+o.thickness_increment, o)
_(r) --> _(r+o.thickness_increment)

homomorphism:

I(a,r,o) --> F(a,r)
S(a,r,o) --> F(a,r)

production:
Attractors(arch):
    pttodisplay = arch.attractor_grid.get_enabled_points()
    if len(pttodisplay) > 0:
        produce [,(3) @g(PointSet(pttodisplay,width=10))]
